<?php

/**
 * @file
 */

function social_post_facebook_social_post_accounts(){
  return array(
    'facebook' => array(
      'name' => 'Facebook',
      'settings' => array(
        'app_id' => array(
          '#type' => 'textfield',
          '#title' => t('App ID')
        ),
        'app_secret' => array(
          '#type' => 'textfield',
          '#title' => t('App Secret')
        )
      ),
      'authentication' => '_social_post_facebook_social_post_authentication_callback',
      'post_authentication' => '_social_post_facebook_social_post_post_authentication_callback',
      'publish' => '_social_post_facebook_social_post_publish_callback',
      'accounts' => '_social_post_facebook_social_post_get_accounts_callback'
    )
  );
}

/**
 * Authentication callback
 */
function _social_post_facebook_social_post_authentication_callback($data){
  $fb = new Facebook\Facebook([
    'app_id' => $data['app_id'], // Replace {app-id} with your app id
    'app_secret' => $data['app_secret'],
    'default_graph_version' => 'v2.12',
    ]);

  $helper = $fb->getRedirectLoginHelper();

  $permissions = ['publish_pages', 'publish_actions']; // Optional permissions
  $loginUrl = $helper->getLoginUrl($data['oauth_callback'], $permissions);
  drupal_goto($loginUrl);
}

/**
 * Post authentication callback
 */
function _social_post_facebook_social_post_post_authentication_callback($data){
  $fb = new Facebook\Facebook([
    'app_id' => $data['app_id'], // Replace {app-id} with your app id
    'app_secret' => $data['app_secret'],
    'default_graph_version' => 'v2.12',
    ]);

  $helper = $fb->getRedirectLoginHelper();

  try {
    $accessToken = $helper->getAccessToken();
  } catch(Facebook\Exceptions\FacebookResponseException $e) {
    // When Graph returns an error
    drupal_set_message('Graph returned an error: ' . $e->getMessage(), 'error');
    return FALSE;
  } catch(Facebook\Exceptions\FacebookSDKException $e) {
    // When validation fails or other local issues
    drupal_set_message('Facebook SDK returned an error: ' . $e->getMessage(), 'error');
    return FALSE;
  }

  if (! isset($accessToken)) {
    drupal_access_denied();
    return FALSE;
  }
  // The OAuth 2.0 client handler helps us manage access tokens
  $oAuth2Client = $fb->getOAuth2Client();
  // Get the access token metadata from /debug_token
  $tokenMetadata = $oAuth2Client->debugToken($accessToken);
  // Validation (these will throw FacebookSDKException's when they fail)
  $tokenMetadata->validateAppId($data['app_id']); // Replace {app-id} with your app id
  // If you know the user ID this access token belongs to, you can validate it here
  //$tokenMetadata->validateUserId('123');
  $tokenMetadata->validateExpiration();
  
  if (! $accessToken->isLongLived()) {
    // Exchanges a short-lived access token for a long-lived one
    try {
      $accessToken = $oAuth2Client->getLongLivedAccessToken($accessToken);
    } catch (Facebook\Exceptions\FacebookSDKException $e) {
      drupal_set_message('Error getting long-lived access token: ' . $helper->getMessage(), 'error');
      return FALSE;
    }
  }
  return array('access_token' => $accessToken->getValue());
}

/**
 * Publish callback
 */
function _social_post_facebook_social_post_publish_callback($data){
  $fb = new Facebook\Facebook([
    'app_id' => $data['app_id'], // Replace {app-id} with your app id
    'app_secret' => $data['app_secret'],
    'default_graph_version' => 'v2.12',
  ]);

  $linkData = [
    'link' => $data['link'],
    'message' => $data['message']
  ];

  foreach($data['accounts_to_publish'] as $account_id){
    try {
      if($account_id == 'me'){
        $response = $fb->post('/' . $account_id . '/feed', $linkData, $data['access_token']);
      }
      else {
        $account = _social_post_facebook_get_access_token('id', $account_id, $data['accounts']);
        $response = $fb->post('/' . $account_id . '/feed', $linkData, $account['access_token']);
      }
    } catch(Facebook\Exceptions\FacebookResponseException $e) {
      drupal_set_message('Graph returned an error: ' . $e->getMessage(), 'error');
      return FALSE;
    } catch(Facebook\Exceptions\FacebookSDKException $e) {
      drupal_set_message('Facebook SDK returned an error: ' . $e->getMessage(), 'error');
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Get social accounts 
 */
function _social_post_facebook_social_post_get_accounts_callback($data){
  $fb = new Facebook\Facebook([
    'app_id' => $data['app_id'], // Replace {app-id} with your app id
    'app_secret' => $data['app_secret'],
    'default_graph_version' => 'v2.12',
  ]);
  try {
    // Returns a `Facebook\FacebookResponse` object
    $response = $fb->get('/me/accounts?limit=100', $data['access_token']);
  } catch(Facebook\Exceptions\FacebookResponseException $e) {
    drupal_set_message('Graph returned an error: ' . $e->getMessage(), 'error');
    return FALSE;
  } catch(Facebook\Exceptions\FacebookSDKException $e) {
    drupal_set_message('Facebook SDK returned an error: ' . $e->getMessage(), 'error');
    return FALSE;
  }
  $accounts = $response->getDecodedBody()['data'];
  // get self account details
  try {
    // Returns a `Facebook\FacebookResponse` object
    $response = $fb->get('/me', $data['access_token']);
  } catch(Facebook\Exceptions\FacebookResponseException $e) {
    drupal_set_message('Graph returned an error: ' . $e->getMessage(), 'error');
    return FALSE;
  } catch(Facebook\Exceptions\FacebookSDKException $e) {
    drupal_set_message('Facebook SDK returned an error: ' . $e->getMessage(), 'error');
    return FALSE;
  }
  $me = $response->getDecodedBody();
  $accounts[] = array('id' => 'me', 'name' => $me['name']);
  return $accounts;
}

/**
 * Get attributes
 */
function _social_post_facebook_get_access_token($name, $value, $data) {
  foreach ($data as $key => $val) {
    if ($val[$name] === $value) {
      return $val;
    }
  }
  return NULL;
}